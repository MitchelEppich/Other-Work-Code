<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_damage</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Damage Object
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instance Variables
attack = 1;
strength = 1;
knockback = 10;
critical = 1;
creator = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy self
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_lifeform_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage all lifeforms
if(other.id != creator) {
    var damage = ceil(0.1 * attack * strength * 1);
    // Check if a critical hit
    if(irandom(100) &lt;= critical) {
        damage *= 1 + random(1);
        damage = round(damage);
    }

    if(damage &gt; other.hp)
        damage = other.hp;
        
    other.hp -= damage;
    
    // Play other struck sound
    audio_play_sound(other.struck, 1, 0);
    
    // Check if creator is still alive
    if(!instance_exists(creator))
        exit;
    
    // Add experience to creator
    creator.experience += damage;
    if(other.hp &lt;= 0) {
        while(other.experience &gt; 0) {
            var xp = instance_create(other.x, other.y, obj_xpOrb);
            var experienceCrate = other.experience / (irandom(2) + 5);
            xp.experience = experienceCrate;
            xp.target = creator;
            other.experience -= experienceCrate * 1.30;
            
        }
    }
       
    // Apply knockback 
    var dir = point_direction(creator.x, creator.y, other.x, other.y);
    var xforce = lengthdir_x(knockback, dir);
    var yforce = lengthdir_y(knockback, dir);
    var hspd = xforce;
    var vspd = yforce;
    with (other) {
    
        // Create hit caption
        var caption = instance_create(self.x, self.y, obj_hitcaption);
        caption.hit = damage;
    
        if(scr_grid_place_meeting(x + hspd, y)) {
            while(!scr_grid_place_meeting(x + sign(hspd), y)) {
                x += sign(hspd);
            }
            hspd = 0;
        }
        //phy_position_x += hspd;
        
        
        // Vertical collisions
        if(scr_grid_place_meeting(x, y + vspd)) {
            while(!scr_grid_place_meeting(x, y + sign(vspd))) {
                y += sign(vspd);
            }
            vspd = 0;
        }
        //phy_position_y += vspd;
    
       physics_apply_impulse(x, y, hspd, vspd);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>-1</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,12</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
